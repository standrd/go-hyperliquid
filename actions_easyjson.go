// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *WithdrawFromBridgeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in WithdrawFromBridgeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawFromBridgeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawFromBridgeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawFromBridgeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawFromBridgeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *VaultUsdTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in VaultUsdTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultUsdTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultUsdTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultUsdTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultUsdTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *VaultModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "allowDeposits":
			out.AllowDeposits = bool(in.Bool())
		case "alwaysCloseOnWithdraw":
			out.AlwaysCloseOnWithdraw = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in VaultModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"allowDeposits\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowDeposits))
	}
	{
		const prefix string = ",\"alwaysCloseOnWithdraw\":"
		out.RawString(prefix)
		out.Bool(bool(in.AlwaysCloseOnWithdraw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *VaultDistributeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "vaultAddress":
			out.VaultAddress = string(in.String())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in VaultDistributeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"vaultAddress\":"
		out.RawString(prefix)
		out.String(string(in.VaultAddress))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultDistributeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultDistributeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultDistributeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultDistributeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid3(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid4(in *jlexer.Lexer, out *UseBigBlocksAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "usingBigBlocks":
			out.UsingBigBlocks = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid4(out *jwriter.Writer, in UseBigBlocksAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"usingBigBlocks\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsingBigBlocks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UseBigBlocksAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UseBigBlocksAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UseBigBlocksAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UseBigBlocksAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid4(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid5(in *jlexer.Lexer, out *UsdTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid5(out *jwriter.Writer, in UsdTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid5(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid6(in *jlexer.Lexer, out *UsdClassTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "toPerp":
			out.ToPerp = bool(in.Bool())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid6(out *jwriter.Writer, in UsdClassTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"toPerp\":"
		out.RawString(prefix)
		out.Bool(bool(in.ToPerp))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdClassTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdClassTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdClassTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdClassTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid6(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid7(in *jlexer.Lexer, out *UpdateLeverageAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "asset":
			out.Asset = int(in.Int())
		case "leverage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Leverage = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Leverage)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid7(out *jwriter.Writer, in UpdateLeverageAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix)
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"leverage\":"
		out.RawString(prefix)
		if in.Leverage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Leverage {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateLeverageAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateLeverageAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateLeverageAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateLeverageAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid7(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid8(in *jlexer.Lexer, out *UpdateIsolatedMarginAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "asset":
			out.Asset = int(in.Int())
		case "isBuy":
			out.IsBuy = bool(in.Bool())
		case "ntli":
			out.Ntli = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid8(out *jwriter.Writer, in UpdateIsolatedMarginAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix)
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"isBuy\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"ntli\":"
		out.RawString(prefix)
		out.Float64(float64(in.Ntli))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateIsolatedMarginAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateIsolatedMarginAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateIsolatedMarginAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateIsolatedMarginAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid8(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid9(in *jlexer.Lexer, out *TokenDelegateAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "validator":
			out.Validator = string(in.String())
		case "wei":
			out.Wei = int(in.Int())
		case "isUndelegate":
			out.IsUndelegate = bool(in.Bool())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid9(out *jwriter.Writer, in TokenDelegateAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix)
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"wei\":"
		out.RawString(prefix)
		out.Int(int(in.Wei))
	}
	{
		const prefix string = ",\"isUndelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUndelegate))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenDelegateAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenDelegateAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenDelegateAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenDelegateAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid9(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid10(in *jlexer.Lexer, out *SubAccountTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "subAccountUser":
			out.SubAccountUser = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "usd":
			out.Usd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid10(out *jwriter.Writer, in SubAccountTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"subAccountUser\":"
		out.RawString(prefix)
		out.String(string(in.SubAccountUser))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"usd\":"
		out.RawString(prefix)
		out.Int(int(in.Usd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccountTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccountTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccountTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccountTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid10(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid11(in *jlexer.Lexer, out *SubAccountSpotTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "subAccountUser":
			out.SubAccountUser = string(in.String())
		case "isDeposit":
			out.IsDeposit = bool(in.Bool())
		case "token":
			out.Token = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid11(out *jwriter.Writer, in SubAccountSpotTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"subAccountUser\":"
		out.RawString(prefix)
		out.String(string(in.SubAccountUser))
	}
	{
		const prefix string = ",\"isDeposit\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeposit))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccountSpotTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccountSpotTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccountSpotTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccountSpotTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid11(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid12(in *jlexer.Lexer, out *SpotTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid12(out *jwriter.Writer, in SpotTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid12(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid13(in *jlexer.Lexer, out *SetReferrerAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid13(out *jwriter.Writer, in SetReferrerAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetReferrerAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetReferrerAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetReferrerAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetReferrerAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid13(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid14(in *jlexer.Lexer, out *ScheduleCancelAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(int64)
				}
				*out.Time = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid14(out *jwriter.Writer, in ScheduleCancelAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(*in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScheduleCancelAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScheduleCancelAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScheduleCancelAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScheduleCancelAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid14(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid15(in *jlexer.Lexer, out *PerpDexClassTransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "dex":
			out.Dex = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		case "toPerp":
			out.ToPerp = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid15(out *jwriter.Writer, in PerpDexClassTransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"dex\":"
		out.RawString(prefix)
		out.String(string(in.Dex))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"toPerp\":"
		out.RawString(prefix)
		out.Bool(bool(in.ToPerp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PerpDexClassTransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PerpDexClassTransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PerpDexClassTransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PerpDexClassTransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid15(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid16(in *jlexer.Lexer, out *OrderWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = int(in.Int())
		case "b":
			out.IsBuy = bool(in.Bool())
		case "p":
			out.LimitPx = string(in.String())
		case "s":
			out.Size = string(in.String())
		case "r":
			out.ReduceOnly = bool(in.Bool())
		case "t":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.OrderType = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.OrderType)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Cloid = nil
			} else {
				if out.Cloid == nil {
					out.Cloid = new(string)
				}
				*out.Cloid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid16(out *jwriter.Writer, in OrderWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuy))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.LimitPx))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		if in.OrderType == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.OrderType {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Cloid != nil {
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(*in.Cloid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid16(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid17(in *jlexer.Lexer, out *OrderAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]OrderWire, 0, 0)
					} else {
						out.Orders = []OrderWire{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v5 OrderWire
					(v5).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "grouping":
			out.Grouping = string(in.String())
		case "builder":
			if in.IsNull() {
				in.Skip()
				out.Builder = nil
			} else {
				if out.Builder == nil {
					out.Builder = new(BuilderInfo)
				}
				easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid18(in, out.Builder)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid17(out *jwriter.Writer, in OrderAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Orders {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"grouping\":"
		out.RawString(prefix)
		out.String(string(in.Grouping))
	}
	if in.Builder != nil {
		const prefix string = ",\"builder\":"
		out.RawString(prefix)
		easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid18(out, *in.Builder)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid17(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid18(in *jlexer.Lexer, out *BuilderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "b":
			out.Builder = string(in.String())
		case "f":
			out.Fee = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid18(out *jwriter.Writer, in BuilderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix[1:])
		out.String(string(in.Builder))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int(int(in.Fee))
	}
	out.RawByte('}')
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid19(in *jlexer.Lexer, out *MultiSigAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Action = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 interface{}
					if m, ok := v8.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v8.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v8 = in.Interface()
					}
					(out.Action)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "signers":
			if in.IsNull() {
				in.Skip()
				out.Signers = nil
			} else {
				in.Delim('[')
				if out.Signers == nil {
					if !in.IsDelim(']') {
						out.Signers = make([]string, 0, 4)
					} else {
						out.Signers = []string{}
					}
				} else {
					out.Signers = (out.Signers)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Signers = append(out.Signers, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signatures":
			if in.IsNull() {
				in.Skip()
				out.Signatures = nil
			} else {
				in.Delim('[')
				if out.Signatures == nil {
					if !in.IsDelim(']') {
						out.Signatures = make([]string, 0, 4)
					} else {
						out.Signatures = []string{}
					}
				} else {
					out.Signatures = (out.Signatures)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Signatures = append(out.Signatures, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid19(out *jwriter.Writer, in MultiSigAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Action {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"signers\":"
		out.RawString(prefix)
		if in.Signers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Signers {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signatures\":"
		out.RawString(prefix)
		if in.Signatures == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Signatures {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid19(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid20(in *jlexer.Lexer, out *ModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "oid":
			if m, ok := out.Oid.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Oid.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Oid = in.Interface()
			}
		case "order":
			(out.Order).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid20(out *jwriter.Writer, in ModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		if m, ok := in.Oid.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Oid.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Oid))
		}
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		(in.Order).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid20(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid21(in *jlexer.Lexer, out *CreateVaultAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "initialUsd":
			out.InitialUsd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid21(out *jwriter.Writer, in CreateVaultAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"initialUsd\":"
		out.RawString(prefix)
		out.Int(int(in.InitialUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateVaultAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateVaultAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateVaultAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateVaultAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid21(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid22(in *jlexer.Lexer, out *CreateSubAccountAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid22(out *jwriter.Writer, in CreateSubAccountAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSubAccountAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSubAccountAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSubAccountAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSubAccountAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid22(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid23(in *jlexer.Lexer, out *ConvertToMultiSigUserAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "signers":
			out.Signers = string(in.String())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid23(out *jwriter.Writer, in ConvertToMultiSigUserAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"signers\":"
		out.RawString(prefix)
		out.String(string(in.Signers))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConvertToMultiSigUserAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConvertToMultiSigUserAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConvertToMultiSigUserAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConvertToMultiSigUserAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid23(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid24(in *jlexer.Lexer, out *CancelOrderWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = int(in.Int())
		case "o":
			out.OrderID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid24(out *jwriter.Writer, in CancelOrderWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid24(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid25(in *jlexer.Lexer, out *CancelByCloidWire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset":
			out.Asset = int(in.Int())
		case "cloid":
			out.ClientID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid25(out *jwriter.Writer, in CancelByCloidWire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Asset))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelByCloidWire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelByCloidWire) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelByCloidWire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelByCloidWire) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid25(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid26(in *jlexer.Lexer, out *CancelByCloidAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "cancels":
			if in.IsNull() {
				in.Skip()
				out.Cancels = nil
			} else {
				in.Delim('[')
				if out.Cancels == nil {
					if !in.IsDelim(']') {
						out.Cancels = make([]CancelByCloidWire, 0, 2)
					} else {
						out.Cancels = []CancelByCloidWire{}
					}
				} else {
					out.Cancels = (out.Cancels)[:0]
				}
				for !in.IsDelim(']') {
					var v16 CancelByCloidWire
					(v16).UnmarshalEasyJSON(in)
					out.Cancels = append(out.Cancels, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid26(out *jwriter.Writer, in CancelByCloidAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cancels\":"
		out.RawString(prefix)
		if in.Cancels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Cancels {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelByCloidAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelByCloidAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelByCloidAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelByCloidAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid26(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid27(in *jlexer.Lexer, out *CancelAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "cancels":
			if in.IsNull() {
				in.Skip()
				out.Cancels = nil
			} else {
				in.Delim('[')
				if out.Cancels == nil {
					if !in.IsDelim(']') {
						out.Cancels = make([]CancelOrderWire, 0, 4)
					} else {
						out.Cancels = []CancelOrderWire{}
					}
				} else {
					out.Cancels = (out.Cancels)[:0]
				}
				for !in.IsDelim(']') {
					var v19 CancelOrderWire
					(v19).UnmarshalEasyJSON(in)
					out.Cancels = append(out.Cancels, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid27(out *jwriter.Writer, in CancelAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cancels\":"
		out.RawString(prefix)
		if in.Cancels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Cancels {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid27(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid28(in *jlexer.Lexer, out *BatchModifyAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "modifies":
			if in.IsNull() {
				in.Skip()
				out.Modifies = nil
			} else {
				in.Delim('[')
				if out.Modifies == nil {
					if !in.IsDelim(']') {
						out.Modifies = make([]ModifyAction, 0, 0)
					} else {
						out.Modifies = []ModifyAction{}
					}
				} else {
					out.Modifies = (out.Modifies)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ModifyAction
					(v22).UnmarshalEasyJSON(in)
					out.Modifies = append(out.Modifies, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid28(out *jwriter.Writer, in BatchModifyAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"modifies\":"
		out.RawString(prefix)
		if in.Modifies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Modifies {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchModifyAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchModifyAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchModifyAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchModifyAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid28(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid29(in *jlexer.Lexer, out *ApproveBuilderFeeAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "builder":
			out.Builder = string(in.String())
		case "maxFeeRate":
			out.MaxFeeRate = string(in.String())
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid29(out *jwriter.Writer, in ApproveBuilderFeeAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"builder\":"
		out.RawString(prefix)
		out.String(string(in.Builder))
	}
	{
		const prefix string = ",\"maxFeeRate\":"
		out.RawString(prefix)
		out.String(string(in.MaxFeeRate))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApproveBuilderFeeAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApproveBuilderFeeAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApproveBuilderFeeAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApproveBuilderFeeAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid29(l, v)
}
func easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid30(in *jlexer.Lexer, out *ApproveAgentAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "agentAddress":
			out.AgentAddress = string(in.String())
		case "agentName":
			if in.IsNull() {
				in.Skip()
				out.AgentName = nil
			} else {
				if out.AgentName == nil {
					out.AgentName = new(string)
				}
				*out.AgentName = string(in.String())
			}
		case "nonce":
			out.Nonce = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid30(out *jwriter.Writer, in ApproveAgentAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"agentAddress\":"
		out.RawString(prefix)
		out.String(string(in.AgentAddress))
	}
	if in.AgentName != nil {
		const prefix string = ",\"agentName\":"
		out.RawString(prefix)
		out.String(string(*in.AgentName))
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Int64(int64(in.Nonce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApproveAgentAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApproveAgentAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComSoniricoGoHyperliquid30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApproveAgentAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApproveAgentAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComSoniricoGoHyperliquid30(l, v)
}
