// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *WsMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Data)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in WsMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Data {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *ValidatorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in ValidatorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValidatorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValidatorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *VIPTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "cross":
			out.Cross = string(in.String())
		case "ntlCutoff":
			out.NtlCutoff = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in VIPTier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"cross\":"
		out.RawString(prefix)
		out.String(string(in.Cross))
	}
	{
		const prefix string = ",\"ntlCutoff\":"
		out.RawString(prefix)
		out.String(string(in.NtlCutoff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VIPTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VIPTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VIPTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VIPTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *UserVolume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "userAdd":
			out.UserAdd = string(in.String())
		case "userCross":
			out.UserCross = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in UserVolume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"userAdd\":"
		out.RawString(prefix)
		out.String(string(in.UserAdd))
	}
	{
		const prefix string = ",\"userCross\":"
		out.RawString(prefix)
		out.String(string(in.UserCross))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVolume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVolume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVolume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVolume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid3(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid4(in *jlexer.Lexer, out *UserState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assetPositions":
			if in.IsNull() {
				in.Skip()
				out.AssetPositions = nil
			} else {
				in.Delim('[')
				if out.AssetPositions == nil {
					if !in.IsDelim(']') {
						out.AssetPositions = make([]AssetPosition, 0, 0)
					} else {
						out.AssetPositions = []AssetPosition{}
					}
				} else {
					out.AssetPositions = (out.AssetPositions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 AssetPosition
					(v3).UnmarshalEasyJSON(in)
					out.AssetPositions = append(out.AssetPositions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "crossMarginSummary":
			(out.CrossMarginSummary).UnmarshalEasyJSON(in)
		case "marginSummary":
			(out.MarginSummary).UnmarshalEasyJSON(in)
		case "withdrawable":
			out.Withdrawable = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid4(out *jwriter.Writer, in UserState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assetPositions\":"
		out.RawString(prefix[1:])
		if in.AssetPositions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.AssetPositions {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"crossMarginSummary\":"
		out.RawString(prefix)
		(in.CrossMarginSummary).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"marginSummary\":"
		out.RawString(prefix)
		(in.MarginSummary).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"withdrawable\":"
		out.RawString(prefix)
		out.String(string(in.Withdrawable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid4(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid5(in *jlexer.Lexer, out *UserFundingHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "startTime":
			out.StartTime = int64(in.Int64())
		case "endTime":
			out.EndTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid5(out *jwriter.Writer, in UserFundingHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"endTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFundingHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFundingHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFundingHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFundingHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid5(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid6(in *jlexer.Lexer, out *UserFees) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "activeReferralDiscount":
			out.ActiveReferralDiscount = string(in.String())
		case "dailyUserVlm":
			if in.IsNull() {
				in.Skip()
				out.DailyUserVolume = nil
			} else {
				in.Delim('[')
				if out.DailyUserVolume == nil {
					if !in.IsDelim(']') {
						out.DailyUserVolume = make([]UserVolume, 0, 1)
					} else {
						out.DailyUserVolume = []UserVolume{}
					}
				} else {
					out.DailyUserVolume = (out.DailyUserVolume)[:0]
				}
				for !in.IsDelim(']') {
					var v6 UserVolume
					(v6).UnmarshalEasyJSON(in)
					out.DailyUserVolume = append(out.DailyUserVolume, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "feeSchedule":
			(out.FeeSchedule).UnmarshalEasyJSON(in)
		case "userAddRate":
			out.UserAddRate = string(in.String())
		case "userCrossRate":
			out.UserCrossRate = string(in.String())
		case "userSpotCrossRate":
			out.UserSpotCrossRate = string(in.String())
		case "userSpotAddRate":
			out.UserSpotAddRate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid6(out *jwriter.Writer, in UserFees) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"activeReferralDiscount\":"
		out.RawString(prefix[1:])
		out.String(string(in.ActiveReferralDiscount))
	}
	{
		const prefix string = ",\"dailyUserVlm\":"
		out.RawString(prefix)
		if in.DailyUserVolume == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.DailyUserVolume {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"feeSchedule\":"
		out.RawString(prefix)
		(in.FeeSchedule).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"userAddRate\":"
		out.RawString(prefix)
		out.String(string(in.UserAddRate))
	}
	{
		const prefix string = ",\"userCrossRate\":"
		out.RawString(prefix)
		out.String(string(in.UserCrossRate))
	}
	{
		const prefix string = ",\"userSpotCrossRate\":"
		out.RawString(prefix)
		out.String(string(in.UserSpotCrossRate))
	}
	{
		const prefix string = ",\"userSpotAddRate\":"
		out.RawString(prefix)
		out.String(string(in.UserSpotAddRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFees) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFees) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFees) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFees) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid6(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid7(in *jlexer.Lexer, out *TxStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid7(out *jwriter.Writer, in TxStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid7(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid8(in *jlexer.Lexer, out *TriggerOrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "triggerPx":
			out.TriggerPx = float64(in.Float64())
		case "isMarket":
			out.IsMarket = bool(in.Bool())
		case "tpsl":
			out.Tpsl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid8(out *jwriter.Writer, in TriggerOrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"triggerPx\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.TriggerPx))
	}
	{
		const prefix string = ",\"isMarket\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMarket))
	}
	{
		const prefix string = ",\"tpsl\":"
		out.RawString(prefix)
		out.String(string(in.Tpsl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TriggerOrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TriggerOrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TriggerOrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TriggerOrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid8(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid9(in *jlexer.Lexer, out *TransferResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid9(out *jwriter.Writer, in TransferResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid9(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid10(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "px":
			out.Px = string(in.String())
		case "sz":
			out.Sz = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "tid":
			out.Tid = int64(in.Int64())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Users = append(out.Users, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid10(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tid))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Users {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid10(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid11(in *jlexer.Lexer, out *Tiers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mm":
			if in.IsNull() {
				in.Skip()
				out.MM = nil
			} else {
				in.Delim('[')
				if out.MM == nil {
					if !in.IsDelim(']') {
						out.MM = make([]MMTier, 0, 2)
					} else {
						out.MM = []MMTier{}
					}
				} else {
					out.MM = (out.MM)[:0]
				}
				for !in.IsDelim(']') {
					var v12 MMTier
					(v12).UnmarshalEasyJSON(in)
					out.MM = append(out.MM, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vip":
			if in.IsNull() {
				in.Skip()
				out.VIP = nil
			} else {
				in.Delim('[')
				if out.VIP == nil {
					if !in.IsDelim(']') {
						out.VIP = make([]VIPTier, 0, 1)
					} else {
						out.VIP = []VIPTier{}
					}
				} else {
					out.VIP = (out.VIP)[:0]
				}
				for !in.IsDelim(']') {
					var v13 VIPTier
					(v13).UnmarshalEasyJSON(in)
					out.VIP = append(out.VIP, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid11(out *jwriter.Writer, in Tiers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mm\":"
		out.RawString(prefix[1:])
		if in.MM == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.MM {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vip\":"
		out.RawString(prefix)
		if in.VIP == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.VIP {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tiers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tiers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tiers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tiers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid11(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid12(in *jlexer.Lexer, out *SubAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "user":
			out.User = string(in.String())
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]string, 0, 4)
					} else {
						out.Permissions = []string{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Permissions = append(out.Permissions, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid12(out *jwriter.Writer, in SubAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Permissions {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid12(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid13(in *jlexer.Lexer, out *StakingSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegated":
			out.Delegated = string(in.String())
		case "undelegated":
			out.Undelegated = string(in.String())
		case "totalPendingWithdrawal":
			out.TotalPendingWithdrawal = string(in.String())
		case "nPendingWithdrawals":
			out.NPendingWithdrawals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid13(out *jwriter.Writer, in StakingSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegated\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegated))
	}
	{
		const prefix string = ",\"undelegated\":"
		out.RawString(prefix)
		out.String(string(in.Undelegated))
	}
	{
		const prefix string = ",\"totalPendingWithdrawal\":"
		out.RawString(prefix)
		out.String(string(in.TotalPendingWithdrawal))
	}
	{
		const prefix string = ",\"nPendingWithdrawals\":"
		out.RawString(prefix)
		out.Int(int(in.NPendingWithdrawals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid13(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid14(in *jlexer.Lexer, out *StakingReward) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "source":
			out.Source = string(in.String())
		case "totalAmount":
			out.TotalAmount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid14(out *jwriter.Writer, in StakingReward) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"totalAmount\":"
		out.RawString(prefix)
		out.String(string(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingReward) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingReward) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingReward) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingReward) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid14(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid15(in *jlexer.Lexer, out *StakingDelegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "lockedUntilTimestamp":
			out.LockedUntilTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid15(out *jwriter.Writer, in StakingDelegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"lockedUntilTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.LockedUntilTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingDelegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingDelegation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingDelegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingDelegation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid15(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid16(in *jlexer.Lexer, out *SpotUserState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balances":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]SpotBalance, 0, 0)
					} else {
						out.Balances = []SpotBalance{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v21 SpotBalance
					(v21).UnmarshalEasyJSON(in)
					out.Balances = append(out.Balances, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid16(out *jwriter.Writer, in SpotUserState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balances\":"
		out.RawString(prefix[1:])
		if in.Balances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Balances {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotUserState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotUserState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotUserState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotUserState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid16(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid17(in *jlexer.Lexer, out *SpotTokenInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "szDecimals":
			out.SzDecimals = int(in.Int())
		case "weiDecimals":
			out.WeiDecimals = int(in.Int())
		case "index":
			out.Index = int(in.Int())
		case "tokenId":
			out.TokenID = string(in.String())
		case "isCanonical":
			out.IsCanonical = bool(in.Bool())
		case "evmContract":
			if in.IsNull() {
				in.Skip()
				out.EvmContract = nil
			} else {
				if out.EvmContract == nil {
					out.EvmContract = new(EvmContract)
				}
				(*out.EvmContract).UnmarshalEasyJSON(in)
			}
		case "fullName":
			if in.IsNull() {
				in.Skip()
				out.FullName = nil
			} else {
				if out.FullName == nil {
					out.FullName = new(string)
				}
				*out.FullName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid17(out *jwriter.Writer, in SpotTokenInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"szDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.SzDecimals))
	}
	{
		const prefix string = ",\"weiDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.WeiDecimals))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"tokenId\":"
		out.RawString(prefix)
		out.String(string(in.TokenID))
	}
	{
		const prefix string = ",\"isCanonical\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCanonical))
	}
	{
		const prefix string = ",\"evmContract\":"
		out.RawString(prefix)
		if in.EvmContract == nil {
			out.RawString("null")
		} else {
			(*in.EvmContract).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fullName\":"
		out.RawString(prefix)
		if in.FullName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FullName))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotTokenInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotTokenInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotTokenInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotTokenInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid17(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid18(in *jlexer.Lexer, out *SpotMetaAndAssetCtxs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Meta":
			(out.Meta).UnmarshalEasyJSON(in)
		case "Ctxs":
			if in.IsNull() {
				in.Skip()
				out.Ctxs = nil
			} else {
				in.Delim('[')
				if out.Ctxs == nil {
					if !in.IsDelim(']') {
						out.Ctxs = make([]SpotAssetCtx, 0, 0)
					} else {
						out.Ctxs = []SpotAssetCtx{}
					}
				} else {
					out.Ctxs = (out.Ctxs)[:0]
				}
				for !in.IsDelim(']') {
					var v24 SpotAssetCtx
					(v24).UnmarshalEasyJSON(in)
					out.Ctxs = append(out.Ctxs, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid18(out *jwriter.Writer, in SpotMetaAndAssetCtxs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Ctxs\":"
		out.RawString(prefix)
		if in.Ctxs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Ctxs {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotMetaAndAssetCtxs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotMetaAndAssetCtxs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotMetaAndAssetCtxs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotMetaAndAssetCtxs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid18(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid19(in *jlexer.Lexer, out *SpotMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "universe":
			if in.IsNull() {
				in.Skip()
				out.Universe = nil
			} else {
				in.Delim('[')
				if out.Universe == nil {
					if !in.IsDelim(']') {
						out.Universe = make([]SpotAssetInfo, 0, 1)
					} else {
						out.Universe = []SpotAssetInfo{}
					}
				} else {
					out.Universe = (out.Universe)[:0]
				}
				for !in.IsDelim(']') {
					var v27 SpotAssetInfo
					(v27).UnmarshalEasyJSON(in)
					out.Universe = append(out.Universe, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]SpotTokenInfo, 0, 0)
					} else {
						out.Tokens = []SpotTokenInfo{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v28 SpotTokenInfo
					(v28).UnmarshalEasyJSON(in)
					out.Tokens = append(out.Tokens, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid19(out *jwriter.Writer, in SpotMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"universe\":"
		out.RawString(prefix[1:])
		if in.Universe == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Universe {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Tokens {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid19(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid20(in *jlexer.Lexer, out *SpotDeployResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid20(out *jwriter.Writer, in SpotDeployResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotDeployResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotDeployResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotDeployResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotDeployResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid20(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid21(in *jlexer.Lexer, out *SpotBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "token":
			out.Token = int(in.Int())
		case "hold":
			out.Hold = string(in.String())
		case "total":
			out.Total = string(in.String())
		case "entryNtl":
			out.EntryNtl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid21(out *jwriter.Writer, in SpotBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.Int(int(in.Token))
	}
	{
		const prefix string = ",\"hold\":"
		out.RawString(prefix)
		out.String(string(in.Hold))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.String(string(in.Total))
	}
	{
		const prefix string = ",\"entryNtl\":"
		out.RawString(prefix)
		out.String(string(in.EntryNtl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid21(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid22(in *jlexer.Lexer, out *SpotAssetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]int, 0, 8)
					} else {
						out.Tokens = []int{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v33 int
					v33 = int(in.Int())
					out.Tokens = append(out.Tokens, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "index":
			out.Index = int(in.Int())
		case "isCanonical":
			out.IsCanonical = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid22(out *jwriter.Writer, in SpotAssetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Tokens {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"isCanonical\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCanonical))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotAssetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotAssetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotAssetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotAssetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid22(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid23(in *jlexer.Lexer, out *SpotAssetCtx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dayNtlVlm":
			out.DayNtlVlm = string(in.String())
		case "markPx":
			out.MarkPx = string(in.String())
		case "midPx":
			if in.IsNull() {
				in.Skip()
				out.MidPx = nil
			} else {
				if out.MidPx == nil {
					out.MidPx = new(string)
				}
				*out.MidPx = string(in.String())
			}
		case "prevDayPx":
			out.PrevDayPx = string(in.String())
		case "circulatingSupply":
			out.CirculatingSupply = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid23(out *jwriter.Writer, in SpotAssetCtx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dayNtlVlm\":"
		out.RawString(prefix[1:])
		out.String(string(in.DayNtlVlm))
	}
	{
		const prefix string = ",\"markPx\":"
		out.RawString(prefix)
		out.String(string(in.MarkPx))
	}
	{
		const prefix string = ",\"midPx\":"
		out.RawString(prefix)
		if in.MidPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MidPx))
		}
	}
	{
		const prefix string = ",\"prevDayPx\":"
		out.RawString(prefix)
		out.String(string(in.PrevDayPx))
	}
	{
		const prefix string = ",\"circulatingSupply\":"
		out.RawString(prefix)
		out.String(string(in.CirculatingSupply))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpotAssetCtx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpotAssetCtx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpotAssetCtx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpotAssetCtx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid23(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid24(in *jlexer.Lexer, out *SetReferrerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid24(out *jwriter.Writer, in SetReferrerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetReferrerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetReferrerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetReferrerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetReferrerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid24(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid25(in *jlexer.Lexer, out *ScheduleCancelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid25(out *jwriter.Writer, in ScheduleCancelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScheduleCancelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScheduleCancelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScheduleCancelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScheduleCancelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid25(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid26(in *jlexer.Lexer, out *ReferralState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referralCode":
			out.ReferralCode = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "referred":
			if in.IsNull() {
				in.Skip()
				out.Referred = nil
			} else {
				in.Delim('[')
				if out.Referred == nil {
					if !in.IsDelim(']') {
						out.Referred = make([]string, 0, 4)
					} else {
						out.Referred = []string{}
					}
				} else {
					out.Referred = (out.Referred)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Referred = append(out.Referred, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid26(out *jwriter.Writer, in ReferralState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"referralCode\":"
		out.RawString(prefix[1:])
		out.String(string(in.ReferralCode))
	}
	{
		const prefix string = ",\"referrer\":"
		out.RawString(prefix)
		out.String(string(in.Referrer))
	}
	{
		const prefix string = ",\"referred\":"
		out.RawString(prefix)
		if in.Referred == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Referred {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReferralState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReferralState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReferralState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReferralState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid26(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid27(in *jlexer.Lexer, out *QueriedOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "side":
			out.Side = OrderSide(in.String())
		case "limitPx":
			out.LimitPx = string(in.String())
		case "sz":
			out.Sz = string(in.String())
		case "oid":
			out.Oid = int64(in.Int64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "triggerCondition":
			out.TriggerCondition = string(in.String())
		case "isTrigger":
			out.IsTrigger = bool(in.Bool())
		case "triggerPx":
			out.TriggerPx = string(in.String())
		case "isPositionTpsl":
			out.IsPositionTpsl = bool(in.Bool())
		case "reduceOnly":
			out.ReduceOnly = bool(in.Bool())
		case "orderType":
			out.OrderType = string(in.String())
		case "origSz":
			out.OrigSz = string(in.String())
		case "tif":
			out.Tif = Tif(in.String())
		case "cloid":
			if in.IsNull() {
				in.Skip()
				out.Cloid = nil
			} else {
				if out.Cloid == nil {
					out.Cloid = new(string)
				}
				*out.Cloid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid27(out *jwriter.Writer, in QueriedOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"limitPx\":"
		out.RawString(prefix)
		out.String(string(in.LimitPx))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"isTrigger\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTrigger))
	}
	{
		const prefix string = ",\"triggerPx\":"
		out.RawString(prefix)
		out.String(string(in.TriggerPx))
	}
	{
		const prefix string = ",\"isPositionTpsl\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPositionTpsl))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"orderType\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"origSz\":"
		out.RawString(prefix)
		out.String(string(in.OrigSz))
	}
	{
		const prefix string = ",\"tif\":"
		out.RawString(prefix)
		out.String(string(in.Tif))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		if in.Cloid == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Cloid))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueriedOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueriedOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueriedOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueriedOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid27(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid28(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "entryPx":
			if in.IsNull() {
				in.Skip()
				out.EntryPx = nil
			} else {
				if out.EntryPx == nil {
					out.EntryPx = new(string)
				}
				*out.EntryPx = string(in.String())
			}
		case "leverage":
			(out.Leverage).UnmarshalEasyJSON(in)
		case "liquidationPx":
			if in.IsNull() {
				in.Skip()
				out.LiquidationPx = nil
			} else {
				if out.LiquidationPx == nil {
					out.LiquidationPx = new(string)
				}
				*out.LiquidationPx = string(in.String())
			}
		case "marginUsed":
			out.MarginUsed = string(in.String())
		case "positionValue":
			out.PositionValue = string(in.String())
		case "returnOnEquity":
			out.ReturnOnEquity = string(in.String())
		case "szi":
			out.Szi = string(in.String())
		case "unrealizedPnl":
			out.UnrealizedPnl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid28(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"entryPx\":"
		out.RawString(prefix)
		if in.EntryPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EntryPx))
		}
	}
	{
		const prefix string = ",\"leverage\":"
		out.RawString(prefix)
		(in.Leverage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"liquidationPx\":"
		out.RawString(prefix)
		if in.LiquidationPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LiquidationPx))
		}
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"returnOnEquity\":"
		out.RawString(prefix)
		out.String(string(in.ReturnOnEquity))
	}
	{
		const prefix string = ",\"szi\":"
		out.RawString(prefix)
		out.String(string(in.Szi))
	}
	{
		const prefix string = ",\"unrealizedPnl\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPnl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid28(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid29(in *jlexer.Lexer, out *PerpDexSchemaInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullName":
			out.FullName = string(in.String())
		case "collateralToken":
			out.CollateralToken = int(in.Int())
		case "oracleUpdater":
			if in.IsNull() {
				in.Skip()
				out.OracleUpdater = nil
			} else {
				if out.OracleUpdater == nil {
					out.OracleUpdater = new(string)
				}
				*out.OracleUpdater = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid29(out *jwriter.Writer, in PerpDexSchemaInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"collateralToken\":"
		out.RawString(prefix)
		out.Int(int(in.CollateralToken))
	}
	{
		const prefix string = ",\"oracleUpdater\":"
		out.RawString(prefix)
		if in.OracleUpdater == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OracleUpdater))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PerpDexSchemaInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PerpDexSchemaInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PerpDexSchemaInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PerpDexSchemaInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid29(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid30(in *jlexer.Lexer, out *PerpDeployResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			easyjson6601e8cdDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid30(out *jwriter.Writer, in PerpDeployResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson6601e8cdEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PerpDeployResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PerpDeployResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PerpDeployResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PerpDeployResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid30(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Statuses []TxStatus `json:"statuses"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.Statuses = nil
			} else {
				in.Delim('[')
				if out.Statuses == nil {
					if !in.IsDelim(']') {
						out.Statuses = make([]TxStatus, 0, 2)
					} else {
						out.Statuses = []TxStatus{}
					}
				} else {
					out.Statuses = (out.Statuses)[:0]
				}
				for !in.IsDelim(']') {
					var v39 TxStatus
					(v39).UnmarshalEasyJSON(in)
					out.Statuses = append(out.Statuses, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Statuses []TxStatus `json:"statuses"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix[1:])
		if in.Statuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Statuses {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid31(in *jlexer.Lexer, out *OrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(LimitOrderType)
				}
				(*out.Limit).UnmarshalEasyJSON(in)
			}
		case "trigger":
			if in.IsNull() {
				in.Skip()
				out.Trigger = nil
			} else {
				if out.Trigger == nil {
					out.Trigger = new(TriggerOrderType)
				}
				(*out.Trigger).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid31(out *jwriter.Writer, in OrderType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Limit).MarshalEasyJSON(out)
	}
	if in.Trigger != nil {
		const prefix string = ",\"trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Trigger).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid31(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid32(in *jlexer.Lexer, out *OrderQueryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = OrderQueryStatus(in.String())
		case "order":
			(out.Order).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid32(out *jwriter.Writer, in OrderQueryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if true {
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		(in.Order).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderQueryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderQueryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderQueryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderQueryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid32(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid33(in *jlexer.Lexer, out *OrderQueryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			(out.Order).UnmarshalEasyJSON(in)
		case "status":
			out.Status = OrderStatusValue(in.String())
		case "statusTimestamp":
			out.StatusTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid33(out *jwriter.Writer, in OrderQueryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		(in.Order).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"statusTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.StatusTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderQueryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderQueryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderQueryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderQueryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid33(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid34(in *jlexer.Lexer, out *OpenOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "limitPx":
			out.LimitPx = float64(in.Float64Str())
		case "oid":
			out.Oid = int64(in.Int64())
		case "side":
			out.Side = string(in.String())
		case "sz":
			out.Size = float64(in.Float64Str())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid34(out *jwriter.Writer, in OpenOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"limitPx\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.LimitPx))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Size))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid34(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid35(in *jlexer.Lexer, out *MultiSigSigner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "threshold":
			out.Threshold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid35(out *jwriter.Writer, in MultiSigSigner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"threshold\":"
		out.RawString(prefix)
		out.Int(int(in.Threshold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigSigner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigSigner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigSigner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigSigner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid35(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid36(in *jlexer.Lexer, out *MultiSigResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid36(out *jwriter.Writer, in MultiSigResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid36(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid37(in *jlexer.Lexer, out *MultiSigConversionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid37(out *jwriter.Writer, in MultiSigConversionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigConversionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigConversionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigConversionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigConversionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid37(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid38(in *jlexer.Lexer, out *ModifyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]OrderStatus, 0, 2)
					} else {
						out.Data = []OrderStatus{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v42 OrderStatus
					easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid39(in, &v42)
					out.Data = append(out.Data, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid38(out *jwriter.Writer, in ModifyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v43, v44 := range in.Data {
				if v43 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid39(out, v44)
			}
			out.RawByte(']')
		}
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ModifyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModifyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModifyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModifyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid38(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid39(in *jlexer.Lexer, out *OrderStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resting":
			if in.IsNull() {
				in.Skip()
				out.Resting = nil
			} else {
				if out.Resting == nil {
					out.Resting = new(OrderStatusResting)
				}
				easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid40(in, out.Resting)
			}
		case "filled":
			if in.IsNull() {
				in.Skip()
				out.Filled = nil
			} else {
				if out.Filled == nil {
					out.Filled = new(OrderStatusFilled)
				}
				easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid41(in, out.Filled)
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(string)
				}
				*out.Error = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid39(out *jwriter.Writer, in OrderStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Resting != nil {
		const prefix string = ",\"resting\":"
		first = false
		out.RawString(prefix[1:])
		easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid40(out, *in.Resting)
	}
	if in.Filled != nil {
		const prefix string = ",\"filled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid41(out, *in.Filled)
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Error))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid41(in *jlexer.Lexer, out *OrderStatusFilled) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalSz":
			out.TotalSz = string(in.String())
		case "avgPx":
			out.AvgPx = string(in.String())
		case "oid":
			out.Oid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid41(out *jwriter.Writer, in OrderStatusFilled) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalSz\":"
		out.RawString(prefix[1:])
		out.String(string(in.TotalSz))
	}
	{
		const prefix string = ",\"avgPx\":"
		out.RawString(prefix)
		out.String(string(in.AvgPx))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int(int(in.Oid))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid40(in *jlexer.Lexer, out *OrderStatusResting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oid":
			out.Oid = int64(in.Int64())
		case "cloid":
			if in.IsNull() {
				in.Skip()
				out.ClientID = nil
			} else {
				if out.ClientID == nil {
					out.ClientID = new(string)
				}
				*out.ClientID = string(in.String())
			}
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid40(out *jwriter.Writer, in OrderStatusResting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		if in.ClientID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ClientID))
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid42(in *jlexer.Lexer, out *MetaAndAssetCtxs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ctxs":
			if in.IsNull() {
				in.Skip()
				out.Ctxs = nil
			} else {
				in.Delim('[')
				if out.Ctxs == nil {
					if !in.IsDelim(']') {
						out.Ctxs = make([]AssetCtx, 0, 0)
					} else {
						out.Ctxs = []AssetCtx{}
					}
				} else {
					out.Ctxs = (out.Ctxs)[:0]
				}
				for !in.IsDelim(']') {
					var v45 AssetCtx
					(v45).UnmarshalEasyJSON(in)
					out.Ctxs = append(out.Ctxs, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "universe":
			if in.IsNull() {
				in.Skip()
				out.Universe = nil
			} else {
				in.Delim('[')
				if out.Universe == nil {
					if !in.IsDelim(']') {
						out.Universe = make([]AssetInfo, 0, 2)
					} else {
						out.Universe = []AssetInfo{}
					}
				} else {
					out.Universe = (out.Universe)[:0]
				}
				for !in.IsDelim(']') {
					var v46 AssetInfo
					(v46).UnmarshalEasyJSON(in)
					out.Universe = append(out.Universe, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marginTables":
			if in.IsNull() {
				in.Skip()
				out.MarginTables = nil
			} else {
				in.Delim('[')
				if out.MarginTables == nil {
					if !in.IsDelim(']') {
						out.MarginTables = make([]MarginTable, 0, 1)
					} else {
						out.MarginTables = []MarginTable{}
					}
				} else {
					out.MarginTables = (out.MarginTables)[:0]
				}
				for !in.IsDelim(']') {
					var v47 MarginTable
					(v47).UnmarshalEasyJSON(in)
					out.MarginTables = append(out.MarginTables, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid42(out *jwriter.Writer, in MetaAndAssetCtxs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ctxs\":"
		out.RawString(prefix[1:])
		if in.Ctxs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Ctxs {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"universe\":"
		out.RawString(prefix)
		if in.Universe == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Universe {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"marginTables\":"
		out.RawString(prefix)
		if in.MarginTables == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.MarginTables {
				if v52 > 0 {
					out.RawByte(',')
				}
				(v53).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaAndAssetCtxs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaAndAssetCtxs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaAndAssetCtxs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaAndAssetCtxs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid42(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid43(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "universe":
			if in.IsNull() {
				in.Skip()
				out.Universe = nil
			} else {
				in.Delim('[')
				if out.Universe == nil {
					if !in.IsDelim(']') {
						out.Universe = make([]AssetInfo, 0, 2)
					} else {
						out.Universe = []AssetInfo{}
					}
				} else {
					out.Universe = (out.Universe)[:0]
				}
				for !in.IsDelim(']') {
					var v54 AssetInfo
					(v54).UnmarshalEasyJSON(in)
					out.Universe = append(out.Universe, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marginTables":
			if in.IsNull() {
				in.Skip()
				out.MarginTables = nil
			} else {
				in.Delim('[')
				if out.MarginTables == nil {
					if !in.IsDelim(']') {
						out.MarginTables = make([]MarginTable, 0, 1)
					} else {
						out.MarginTables = []MarginTable{}
					}
				} else {
					out.MarginTables = (out.MarginTables)[:0]
				}
				for !in.IsDelim(']') {
					var v55 MarginTable
					(v55).UnmarshalEasyJSON(in)
					out.MarginTables = append(out.MarginTables, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid43(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"universe\":"
		out.RawString(prefix[1:])
		if in.Universe == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Universe {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"marginTables\":"
		out.RawString(prefix)
		if in.MarginTables == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.MarginTables {
				if v58 > 0 {
					out.RawByte(',')
				}
				(v59).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid43(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid44(in *jlexer.Lexer, out *MarginTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lowerBound":
			out.LowerBound = string(in.String())
		case "maxLeverage":
			out.MaxLeverage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid44(out *jwriter.Writer, in MarginTier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lowerBound\":"
		out.RawString(prefix[1:])
		out.String(string(in.LowerBound))
	}
	{
		const prefix string = ",\"maxLeverage\":"
		out.RawString(prefix)
		out.Int(int(in.MaxLeverage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid44(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid45(in *jlexer.Lexer, out *MarginTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "marginTiers":
			if in.IsNull() {
				in.Skip()
				out.MarginTiers = nil
			} else {
				in.Delim('[')
				if out.MarginTiers == nil {
					if !in.IsDelim(']') {
						out.MarginTiers = make([]MarginTier, 0, 2)
					} else {
						out.MarginTiers = []MarginTier{}
					}
				} else {
					out.MarginTiers = (out.MarginTiers)[:0]
				}
				for !in.IsDelim(']') {
					var v60 MarginTier
					(v60).UnmarshalEasyJSON(in)
					out.MarginTiers = append(out.MarginTiers, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid45(out *jwriter.Writer, in MarginTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"marginTiers\":"
		out.RawString(prefix)
		if in.MarginTiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.MarginTiers {
				if v61 > 0 {
					out.RawByte(',')
				}
				(v62).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid45(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid46(in *jlexer.Lexer, out *MarginSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountValue":
			out.AccountValue = string(in.String())
		case "totalMarginUsed":
			out.TotalMarginUsed = string(in.String())
		case "totalNtlPos":
			out.TotalNtlPos = string(in.String())
		case "totalRawUsd":
			out.TotalRawUsd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid46(out *jwriter.Writer, in MarginSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountValue\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountValue))
	}
	{
		const prefix string = ",\"totalMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.TotalMarginUsed))
	}
	{
		const prefix string = ",\"totalNtlPos\":"
		out.RawString(prefix)
		out.String(string(in.TotalNtlPos))
	}
	{
		const prefix string = ",\"totalRawUsd\":"
		out.RawString(prefix)
		out.String(string(in.TotalRawUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid46(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid47(in *jlexer.Lexer, out *MMTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "makerFractionCutoff":
			out.MakerFractionCutoff = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid47(out *jwriter.Writer, in MMTier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"makerFractionCutoff\":"
		out.RawString(prefix)
		out.String(string(in.MakerFractionCutoff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MMTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MMTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MMTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MMTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid47(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid48(in *jlexer.Lexer, out *LimitOrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tif":
			out.Tif = Tif(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid48(out *jwriter.Writer, in LimitOrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tif\":"
		out.RawString(prefix[1:])
		out.String(string(in.Tif))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid48(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid49(in *jlexer.Lexer, out *Leverage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = int(in.Int())
		case "rawUsd":
			if in.IsNull() {
				in.Skip()
				out.RawUsd = nil
			} else {
				if out.RawUsd == nil {
					out.RawUsd = new(string)
				}
				*out.RawUsd = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid49(out *jwriter.Writer, in Leverage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	if in.RawUsd != nil {
		const prefix string = ",\"rawUsd\":"
		out.RawString(prefix)
		out.String(string(*in.RawUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Leverage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Leverage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Leverage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Leverage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid49(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid50(in *jlexer.Lexer, out *Level) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "n":
			out.N = int(in.Int())
		case "px":
			out.Px = float64(in.Float64Str())
		case "sz":
			out.Sz = float64(in.Float64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid50(out *jwriter.Writer, in Level) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix[1:])
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Sz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Level) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Level) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Level) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Level) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid50(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid51(in *jlexer.Lexer, out *L2Book) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "levels":
			if in.IsNull() {
				in.Skip()
				out.Levels = nil
			} else {
				in.Delim('[')
				if out.Levels == nil {
					if !in.IsDelim(']') {
						out.Levels = make([][]Level, 0, 2)
					} else {
						out.Levels = [][]Level{}
					}
				} else {
					out.Levels = (out.Levels)[:0]
				}
				for !in.IsDelim(']') {
					var v63 []Level
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						in.Delim('[')
						if v63 == nil {
							if !in.IsDelim(']') {
								v63 = make([]Level, 0, 2)
							} else {
								v63 = []Level{}
							}
						} else {
							v63 = (v63)[:0]
						}
						for !in.IsDelim(']') {
							var v64 Level
							(v64).UnmarshalEasyJSON(in)
							v63 = append(v63, v64)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Levels = append(out.Levels, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid51(out *jwriter.Writer, in L2Book) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"levels\":"
		out.RawString(prefix)
		if in.Levels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Levels {
				if v65 > 0 {
					out.RawByte(',')
				}
				if v66 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v67, v68 := range v66 {
						if v67 > 0 {
							out.RawByte(',')
						}
						(v68).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v L2Book) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v L2Book) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *L2Book) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *L2Book) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid51(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid52(in *jlexer.Lexer, out *FundingHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "fundingRate":
			out.FundingRate = string(in.String())
		case "premium":
			out.Premium = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid52(out *jwriter.Writer, in FundingHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"fundingRate\":"
		out.RawString(prefix)
		out.String(string(in.FundingRate))
	}
	{
		const prefix string = ",\"premium\":"
		out.RawString(prefix)
		out.String(string(in.Premium))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FundingHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FundingHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FundingHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FundingHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid52(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid53(in *jlexer.Lexer, out *Fill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "closedPnl":
			out.ClosedPnl = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "crossed":
			out.Crossed = bool(in.Bool())
		case "dir":
			out.Dir = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "oid":
			out.Oid = int64(in.Int64())
		case "px":
			out.Price = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "startPosition":
			out.StartPosition = string(in.String())
		case "sz":
			out.Size = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "fee":
			out.Fee = string(in.String())
		case "feeToken":
			out.FeeToken = string(in.String())
		case "builderFee":
			out.BuilderFee = string(in.String())
		case "tid":
			out.Tid = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid53(out *jwriter.Writer, in Fill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"closedPnl\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClosedPnl))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"crossed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Crossed))
	}
	{
		const prefix string = ",\"dir\":"
		out.RawString(prefix)
		out.String(string(in.Dir))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"startPosition\":"
		out.RawString(prefix)
		out.String(string(in.StartPosition))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.String(string(in.Fee))
	}
	{
		const prefix string = ",\"feeToken\":"
		out.RawString(prefix)
		out.String(string(in.FeeToken))
	}
	if in.BuilderFee != "" {
		const prefix string = ",\"builderFee\":"
		out.RawString(prefix)
		out.String(string(in.BuilderFee))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid53(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid54(in *jlexer.Lexer, out *FeeSchedule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "cross":
			out.Cross = string(in.String())
		case "referralDiscount":
			out.ReferralDiscount = string(in.String())
		case "tiers":
			(out.Tiers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid54(out *jwriter.Writer, in FeeSchedule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"cross\":"
		out.RawString(prefix)
		out.String(string(in.Cross))
	}
	{
		const prefix string = ",\"referralDiscount\":"
		out.RawString(prefix)
		out.String(string(in.ReferralDiscount))
	}
	{
		const prefix string = ",\"tiers\":"
		out.RawString(prefix)
		(in.Tiers).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeeSchedule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeeSchedule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeeSchedule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeeSchedule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid54(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid55(in *jlexer.Lexer, out *EvmContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "evm_extra_wei_decimals":
			out.EvmExtraWeiDecimals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid55(out *jwriter.Writer, in EvmContract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"evm_extra_wei_decimals\":"
		out.RawString(prefix)
		out.Int(int(in.EvmExtraWeiDecimals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EvmContract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EvmContract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EvmContract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EvmContract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid55(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid56(in *jlexer.Lexer, out *CreateVaultResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid56(out *jwriter.Writer, in CreateVaultResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateVaultResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateVaultResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateVaultResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateVaultResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid56(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid57(in *jlexer.Lexer, out *CreateSubAccountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(SubAccount)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid57(out *jwriter.Writer, in CreateSubAccountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(*in.Data).MarshalEasyJSON(out)
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSubAccountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSubAccountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSubAccountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSubAccountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid57(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid58(in *jlexer.Lexer, out *Cloid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid58(out *jwriter.Writer, in Cloid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cloid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cloid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cloid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cloid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid58(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid59(in *jlexer.Lexer, out *Candle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			out.Timestamp = int64(in.Int64())
		case "c":
			out.Close = string(in.String())
		case "h":
			out.High = string(in.String())
		case "i":
			out.Interval = string(in.String())
		case "l":
			out.Low = string(in.String())
		case "n":
			out.Number = int(in.Int())
		case "o":
			out.Open = string(in.String())
		case "s":
			out.Symbol = string(in.String())
		case "t":
			out.Time = int64(in.Int64())
		case "v":
			out.Volume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid59(out *jwriter.Writer, in Candle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Candle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Candle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Candle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Candle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid59(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid60(in *jlexer.Lexer, out *CancelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(OpenOrder)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid60(out *jwriter.Writer, in CancelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(*in.Data).MarshalEasyJSON(out)
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid60(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid61(in *jlexer.Lexer, out *CancelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "oid":
			out.Oid = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid61(out *jwriter.Writer, in CancelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid61(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid62(in *jlexer.Lexer, out *CancelByCloidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "cloid":
			out.Cloid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid62(out *jwriter.Writer, in CancelByCloidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"cloid\":"
		out.RawString(prefix)
		out.String(string(in.Cloid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelByCloidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelByCloidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelByCloidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelByCloidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid62(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid63(in *jlexer.Lexer, out *BulkOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]OrderStatus, 0, 2)
					} else {
						out.Data = []OrderStatus{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v69 OrderStatus
					easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid39(in, &v69)
					out.Data = append(out.Data, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid63(out *jwriter.Writer, in BulkOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v70, v71 := range in.Data {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid39(out, v71)
			}
			out.RawByte(']')
		}
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid63(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid64(in *jlexer.Lexer, out *BulkCancelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]OpenOrder, 0, 1)
					} else {
						out.Data = []OpenOrder{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v72 OpenOrder
					(v72).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid64(out *jwriter.Writer, in BulkCancelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v73, v74 := range in.Data {
				if v73 > 0 {
					out.RawByte(',')
				}
				(v74).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkCancelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkCancelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkCancelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkCancelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid64(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid65(in *jlexer.Lexer, out *BuilderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "b":
			out.Builder = string(in.String())
		case "f":
			out.Fee = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid65(out *jwriter.Writer, in BuilderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix[1:])
		out.String(string(in.Builder))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int(int(in.Fee))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuilderInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuilderInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuilderInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuilderInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid65(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid66(in *jlexer.Lexer, out *AssetPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			(out.Position).UnmarshalEasyJSON(in)
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid66(out *jwriter.Writer, in AssetPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix[1:])
		(in.Position).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid66(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid67(in *jlexer.Lexer, out *AssetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "szDecimals":
			out.SzDecimals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid67(out *jwriter.Writer, in AssetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"szDecimals\":"
		out.RawString(prefix)
		out.Int(int(in.SzDecimals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid67(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid68(in *jlexer.Lexer, out *AssetCtx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "funding":
			out.Funding = string(in.String())
		case "openInterest":
			out.OpenInterest = string(in.String())
		case "prevDayPx":
			out.PrevDayPx = string(in.String())
		case "dayNtlVlm":
			out.DayNtlVlm = string(in.String())
		case "premium":
			out.Premium = string(in.String())
		case "oraclePx":
			out.OraclePx = string(in.String())
		case "markPx":
			out.MarkPx = string(in.String())
		case "midPx":
			out.MidPx = string(in.String())
		case "impactPxs":
			if in.IsNull() {
				in.Skip()
				out.ImpactPxs = nil
			} else {
				in.Delim('[')
				if out.ImpactPxs == nil {
					if !in.IsDelim(']') {
						out.ImpactPxs = make([]string, 0, 4)
					} else {
						out.ImpactPxs = []string{}
					}
				} else {
					out.ImpactPxs = (out.ImpactPxs)[:0]
				}
				for !in.IsDelim(']') {
					var v75 string
					v75 = string(in.String())
					out.ImpactPxs = append(out.ImpactPxs, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dayBaseVlm":
			out.DayBaseVlm = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid68(out *jwriter.Writer, in AssetCtx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"funding\":"
		out.RawString(prefix[1:])
		out.String(string(in.Funding))
	}
	{
		const prefix string = ",\"openInterest\":"
		out.RawString(prefix)
		out.String(string(in.OpenInterest))
	}
	{
		const prefix string = ",\"prevDayPx\":"
		out.RawString(prefix)
		out.String(string(in.PrevDayPx))
	}
	{
		const prefix string = ",\"dayNtlVlm\":"
		out.RawString(prefix)
		out.String(string(in.DayNtlVlm))
	}
	{
		const prefix string = ",\"premium\":"
		out.RawString(prefix)
		out.String(string(in.Premium))
	}
	{
		const prefix string = ",\"oraclePx\":"
		out.RawString(prefix)
		out.String(string(in.OraclePx))
	}
	{
		const prefix string = ",\"markPx\":"
		out.RawString(prefix)
		out.String(string(in.MarkPx))
	}
	if in.MidPx != "" {
		const prefix string = ",\"midPx\":"
		out.RawString(prefix)
		out.String(string(in.MidPx))
	}
	{
		const prefix string = ",\"impactPxs\":"
		out.RawString(prefix)
		if in.ImpactPxs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.ImpactPxs {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.String(string(v77))
			}
			out.RawByte(']')
		}
	}
	if in.DayBaseVlm != "" {
		const prefix string = ",\"dayBaseVlm\":"
		out.RawString(prefix)
		out.String(string(in.DayBaseVlm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetCtx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetCtx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetCtx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetCtx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid68(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid69(in *jlexer.Lexer, out *ApprovalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid69(out *jwriter.Writer, in ApprovalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApprovalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApprovalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApprovalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApprovalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid69(l, v)
}
func easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid70(in *jlexer.Lexer, out *AgentApprovalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "txHash":
			out.TxHash = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid70(out *jwriter.Writer, in AgentApprovalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TxHash != "" {
		const prefix string = ",\"txHash\":"
		out.RawString(prefix)
		out.String(string(in.TxHash))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentApprovalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentApprovalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSoniricoGoHyperliquid70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentApprovalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentApprovalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSoniricoGoHyperliquid70(l, v)
}
